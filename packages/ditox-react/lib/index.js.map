{"version":3,"file":"index.js","sources":["../src/DependencyContainer.tsx","../src/hooks.ts"],"sourcesContent":["import type {Container} from 'ditox';\nimport {createContainer} from 'ditox';\nimport React, {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useContext,\n  useEffect,\n  useMemo,\n} from 'react';\n\nexport const DependencyContainerContext = createContext<Container | undefined>(\n  undefined,\n);\n\n/**\n * A callback for binding dependencies to a container\n */\nexport type DependencyContainerBinder = (container: Container) => unknown;\n\n/**\n * Specifies an existed container or options for a new container:\n * @property root - If `true` then a new container does not depend on any parent containers\n * @property binder - A callback which can bind dependencies to the new container\n */\nexport type DependencyContainerParams = {\n  children: ReactNode;\n  root?: boolean;\n  binder?: DependencyContainerBinder;\n};\n\n/**\n * @category Component\n *\n * Provides a new dependency container to React app\n *\n * This component creates a new container and provides it down to React children.\n *\n * If `binder` callback is specified, it will be called for a new container\n * to binds it with dependencies.\n *\n * If a parent container is exist, it is connected to the current one by default.\n * For making a new root container specify `root` parameter as `true`,\n * and the container will not depend on any parent container.\n *\n * @param params.binder - A callback which initializes the container.\n * @param params.root - Makes the container to not depend on any parent containers.\n *\n * @example\n *\n * ```tsx\n * const TOKEN = token();\n *\n * function appDependencyBinder(container: Container) {\n *   container.bindValue(TOKEN, 'value');\n * }\n *\n * function App() {\n *   return (\n *     <DependencyContainer root binder={appDependencyBinder}>\n *       <NestedComponent />\n *     </DependencyContainer>\n *   );\n * }\n * ```\n *\n */\nexport function DependencyContainer(params: {\n  children: ReactNode;\n  root?: boolean;\n  binder?: DependencyContainerBinder;\n}): ReactElement {\n  const {children, root, binder} = params;\n  const parentContainer = useContext(DependencyContainerContext);\n\n  const container = useMemo(() => {\n    const container = createContainer(root ? undefined : parentContainer);\n    binder?.(container);\n\n    return container;\n  }, [binder, parentContainer, root]);\n\n  useEffect(() => {\n    return () => container.removeAll();\n  }, [container]);\n\n  return (\n    <DependencyContainerContext.Provider value={container}>\n      {children}\n    </DependencyContainerContext.Provider>\n  );\n}\n\n/**\n * @category Component\n *\n * Provides a custom dependency container to React app\n *\n * @param params.container - a custom container\n *\n * @example\n * ```tsx\n * const container = useMemo(() => {\n *   return createContainer();\n * }\n *\n * return (\n *   <CustomDependencyContainer container={container}>\n *     {children}\n *   </CustomDependencyContainer>\n * );\n * ```\n */\nexport function CustomDependencyContainer(params: {\n  children: ReactNode;\n  container: Container;\n}): ReactElement {\n  const {children, container} = params;\n\n  return (\n    <DependencyContainerContext.Provider value={container}>\n      {children}\n    </DependencyContainerContext.Provider>\n  );\n}\n","import {Container, Token} from 'ditox';\nimport {useContext, useMemo} from 'react';\nimport {DependencyContainerContext} from './DependencyContainer';\n\n/**\n * @category Hook\n *\n * Returns a dependency container. Throws an error in case the container is not provided.\n */\nexport function useDependencyContainer(mode: 'strict'): Container;\n/**\n * @category Hook\n *\n * Returns a dependency container, or `undefined` in case the container is not provided.\n */\nexport function useDependencyContainer(\n  mode?: 'optional',\n): Container | undefined;\n/**\n * @internal\n */\nexport function useDependencyContainer(\n  mode?: 'strict' | 'optional',\n): Container | undefined {\n  const container = useContext(DependencyContainerContext);\n\n  if (!container && mode === 'strict') {\n    throw new Error(\n      'Container is not provided by DependencyContainer component',\n    );\n  }\n\n  return container;\n}\n\n/**\n * @category Hook\n *\n * Returns a dependency by token, or fails with an error.\n */\nexport function useDependency<T>(token: Token<T>): T {\n  const container = useDependencyContainer('strict');\n  const value = useMemo(() => container.resolve(token), [container, token]);\n  return value;\n}\n\n/**\n * @category Hook\n *\n * Returns a dependency by token, or `undefined` in case the dependency is not provided.\n */\nexport function useOptionalDependency<T>(token: Token<T>): T | undefined {\n  const container = useDependencyContainer();\n  const value = useMemo(() => container?.get(token), [container, token]);\n  return value;\n}\n"],"names":[],"mappings":";;;AAWO,MAAM,0BAA0B,GAAG,aAAa,CACrD,SAAS,CACV,CAAC;AAkBF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAoCgB,mBAAmB,CAAC,MAInC;IACC,MAAM,EAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAC,GAAG,MAAM,CAAC;IACxC,MAAM,eAAe,GAAG,UAAU,CAAC,0BAA0B,CAAC,CAAC;IAE/D,MAAM,SAAS,GAAG,OAAO,CAAC;QACxB,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,GAAG,SAAS,GAAG,eAAe,CAAC,CAAC;QACtE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,SAAS,EAAE;QAEpB,OAAO,SAAS,CAAC;KAClB,EAAE,CAAC,MAAM,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;IAEpC,SAAS,CAAC;QACR,OAAO,MAAM,SAAS,CAAC,SAAS,EAAE,CAAC;KACpC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,QACE,oBAAC,0BAA0B,CAAC,QAAQ,IAAC,KAAK,EAAE,SAAS,IAClD,QAAQ,CAC2B,EACtC;AACJ;;ACzEA;;;SAGgB,sBAAsB,CACpC,IAA4B;IAE5B,MAAM,SAAS,GAAG,UAAU,CAAC,0BAA0B,CAAC,CAAC;IAEzD,IAAI,CAAC,SAAS,IAAI,IAAI,KAAK,QAAQ,EAAE;QACnC,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAC;KACH;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;;;SAKgB,aAAa,CAAI,KAAe;IAC9C,MAAM,SAAS,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1E,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;SAKgB,qBAAqB,CAAI,KAAe;IACtD,MAAM,SAAS,GAAG,sBAAsB,EAAE,CAAC;IAC3C,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;IACvE,OAAO,KAAK,CAAC;AACf;;;;"}