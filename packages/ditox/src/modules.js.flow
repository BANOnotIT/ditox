// @flow strict

import type {Container, Token} from './ditox';
import type {TokenProps, ValueProps} from './utils';

type ModuleController = {
  /** Dispose the module and clean its resources */
  destroy?: () => void,
};

/**
 * Dependency module
 *
 * @example
 * ```ts
 * type LoggerModule = Module<{
 *   logger: Logger;
 * }>;
 * ```
 */
export type Module<ModuleProps: ValueProps = {}> = {
  ...ModuleController,
  ...ModuleProps,
};

/**
 * Description of a dependency module in declarative way.
 *
 * @example
 * ```ts
 * const LOGGER_MODULE: ModuleDeclaration<LoggerModule> = {
 *   token: LOGGER_MODULE_TOKEN,
 *   factory: (container) => {
 *     const transport = container.resolve(TRANSPORT_TOKEN).open();
 *     return {
 *       logger: { log: (message) => transport.write(message) },
 *       destroy: () => transport.close(),
 *     }
 *   },
 *   exportedProps: {
 *     logger: LOGGER_TOKEN,
 *   },
 * };
 * ```
 */
export type ModuleDeclaration<T: Module<*>> = {
  /** Token for the module */
  token: Token<T>,

  /** Factory of the module */
  factory: (container: Container) => T,

  /** Dictionary of module properties which are bound to tokens. */
  exportedProps?: $Shape<TokenProps<T>>,

  /** Callback could be used to prepare an environment. It is called before binding the module. */
  beforeBinding?: (container: Container) => void,

  /** Callback could be used to export complex dependencies from the module. It is called after binding the module.  */
  afterBinding?: (container: Container) => void,
};

/**
 * Options for module binding.
 *
 * `scope` types:
 *   - `singleton` - **This is the default**. The module is created and cached by the container which registered the factory.
 *   - `scoped` - The module is created and cached by the container which starts resolving.
 */
export type BindModuleOptions = {
  scope?: 'scoped' | 'singleton',
};

/**
 * Binds the dependency module to the container
 * @param container - Dependency container.
 * @param moduleDeclaration - Declaration of the dependency module.
 * @param options - Options for module binding.
 *
 * @example
 * ```ts
 * bindModule(container, LOGGER_MODULE);
 * ```
 */
declare export function bindModule<T: Module<*>>(
  container: Container,
  moduleDeclaration: ModuleDeclaration<T>,
  options?: BindModuleOptions,
): void;

export type ModuleBindingEntry =
  | ModuleDeclaration<*>
  | {
      module: ModuleDeclaration<*>,
      options: BindModuleOptions,
    };

/**
 * Binds dependency modules to the container
 *
 * @param container - Dependency container for binding
 * @param modules - Array of module binding entries: module declaration or `{module: ModuleDeclaration, options: BindModuleOptions}` objects.
 */
declare export function bindModules(
  container: Container,
  modules: Array<ModuleBindingEntry>,
): void;
