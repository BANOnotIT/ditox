// @flow strict

// ditox.js

/**
 * @ignore
 * Binding token for mandatory value
 */
export type RequiredToken<T> = {
  symbol: symbol,
  type?: T, // Anchor for Typescript type inference.
};

/**
 * @ignore
 * Binding token for optional value
 */
export type OptionalToken<T> = {
  symbol: symbol,
  type?: T, // Anchor for Typescript type inference.
  isOptional: true,
  optionalValue: T,
};

/**
 * Binding token.
 */
export type Token<T> = RequiredToken<T> | OptionalToken<T>;

/**
 * Creates a new binding token.
 * @param description - Token description for better error messages.
 */
declare export function token<T>(description?: string): Token<T>;

/**
 * Decorate a token with an optional value.
 * This value is be used as default value in case a container does not have registered token.
 * @param token - Existed token.
 * @param optionalValue - Default value for the resolver.
 */
declare export function optional<T>(
  token: Token<T>,
  optionalValue: T,
): OptionalToken<T>;
declare export function optional<T>(token: Token<T>): OptionalToken<T | void>;
declare export function optional<T>(
  token: Token<T>,
  optionalValue?: T,
): OptionalToken<T | void>;

/**
 * ResolverError is thrown by the resolver when a token is not found in a container.
 */
declare export class ResolverError extends Error {
  constructor(message: string): ResolverError;
}

/**
 * @see https://github.com/mnasyrov/ditox#factory-lifetimes
 */
export type FactoryScope = 'scoped' | 'singleton' | 'transient';

/**
 * Options for factory binding.
 *
 * `scope` types:
 *   - `scoped` - **This is the default**. The value is created and cached by the container which starts resolving.
 *   - `singleton` - The value is created and cached by the container which registered the factory.
 *   - `transient` - The value is created every time it is resolved.
 *
 * `scoped` and `singleton` scopes can have `onRemoved` callback. It is called when a token is removed from the container.
 */
export type FactoryOptions<T> =
  | {
      scope?: 'scoped' | 'singleton',
      onRemoved?: (value: T) => void,
    }
  | {
      scope: 'transient',
    };

/**
 * Dependency container.
 */
export type Container = {
  /**
   * Binds a value for the token
   */
  bindValue<T>(token: Token<T>, value: T): void,
  /**
   * Binds a factory for the token.
   */
  bindFactory<T>(
    token: Token<T>,
    factory: (Container) => T,
    options?: FactoryOptions<T>,
  ): void,

  /**
   * Returns a resolved value by the token, or returns `undefined` in case the token is not found.
   */
  get<T>(token: Token<T>): T | void,
  /**
   * Returns a resolved value by the token, or throws `ResolverError` in case the token is not found.
   */
  resolve<T>(token: Token<T>): T,

  /**
   * Removes a binding for the token.
   */
  remove<T>(token: Token<T>): void,
  /**
   * Removes all bindings in the container.
   */
  removeAll(): void,
};

/**
 * Creates a new dependency container.
 *
 * Container can have an optional parent to chain token resolution. The parent is used in case the current container does not have a registered token.
 *
 * @param parentContainer - Optional parent container.
 */
declare export function createContainer(parentContainer?: Container): Container;

// utils.js

type ValuesTuple =
  | [*]
  | [*, *]
  | [*, *, *]
  | [*, *, *, *]
  | [*, *, *, *, *]
  | [*, *, *, *, *, *]
  | [*, *, *, *, *, *, *];

/**
 * Returns an array of resolved values by the specified token.
 * If a token is not found, then `undefined` value is used.
 */
declare export function getValues<
  Values: ValuesTuple,
  Tokens: $TupleMap<Values, <V>() => Token<V>>,
>(
  container: Container,
  ...tokens: Tokens
): Values;

/**
 * Returns an array of resolved values by the specified token.
 * If a token is not found, then `ResolverError` is thrown.
 */
declare export function resolveValues<
  Values: ValuesTuple,
  Tokens: $TupleMap<Values, <V>() => Token<V>>,
>(
  container: Container,
  ...tokens: Tokens
): Values;

/**
 * Decorates a factory by passing resolved tokens as factory arguments.
 * @param factory - A factory.
 * @param tokens - Tokens which correspond to factory arguments.
 * @return Decorated factory which takes a dependency container as a single argument.
 */
declare export function injectable<
  Values: ValuesTuple,
  Tokens: $TupleMap<Values, <V>() => Token<V>>,
  Result,
>(
  factory: (...params: Values) => Result,
  ...tokens: Tokens
): (container: Container) => Result;

/**
 * Rebinds the array by the token with added new value.
 * @param container - Dependency container.
 * @param token - Token for an array of values.
 * @param value - New value which is added to the end of the array.
 */
declare export function bindMultiValue<T>(
  container: Container,
  token: Token<Array<T>>,
  value: T,
): void;
